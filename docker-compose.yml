version: "3.8"

services:
  caddy:
    image: caddy:alpine
    restart: unless-stopped
    container_name: caddy
    ports:
      - 80:80
      - 443:443
    networks:
      backend:
        ipv4_address: 10.5.0.254
    links:
      - minio:minio.hm22.local
    volumes:
      - ./data/caddy/data:/data
      - ./data/caddy/config:/config
      - ./Caddyfile:/etc/caddy/Caddyfile

  minio:
    container_name: minio
    image: minio/minio:latest
    command: minio server /data --console-address "0.0.0.0:9001" --certs-dir /certs
    restart: unless-stopped
    ports:
      - 9000:9000
      - 9001:9001
    networks:
      backend:
    volumes:
      - ./data/minio:/data
      - ./data/caddy/data/caddy/pki/authorities/local/root.crt:/certs/CAs/root.crt
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://console.minio.hm22.local
      - MINIO_SERVER_URL=https://minio.hm22.local
    extra_hosts:
      - minio.hm22.local:10.5.0.254

  ipfs:
    container_name: ipfs
    image: ipfs/go-ipfs:latest
    restart: unless-stopped
    networks:
      backend:
        ipv4_address: 10.5.0.4
    ports:
      - "5001:5001"
      - "8080:8080"
      - "4001:4001/udp"
      - "4001:4001"
    volumes:
      - ./data/ipfs/export:/export
      - ./data/ipfs/storage:/data/ipfs
    environment:
      - IPFS_PROFILE=server

  create-static:
    container_name: create-static
    image: minio/mc:latest
    entrypoint: /bin/bash
    command: ./create.sh
    volumes:
      - ./create.sh:/create.sh

  build-static:
    container_name: build-static
    image: node:16
    command: ./build.sh
    volumes:
      - ./build.sh:/build.sh
      - ./static:/static

  push-static:
    container_name: push-static
    image: minio/mc:latest
    command: cp --insecure -r /static/dist/ minio/static
    networks:
      backend:
        ipv4_address: 10.5.0.20
    volumes:
      - ./static:/static
      - ./data/mc:/root/.mc
      - ./data/caddy/data/caddy/pki/authorities/local/root.crt:/certs/CAs/root.crt
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MC_HOST_minio=https://${MINIO_ACCESS_KEY}:${MINIO_SECRET_KEY}@minio.hm22.local
    extra_hosts:
      - minio.hm22.local:10.5.0.254

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    networks:
      backend:

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    networks:
      backend:
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_LISTENERS: "PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./kafka_run.sh:/tmp/kafka_run.sh
      - ./create-kafka-topics.sh:/tmp/create-kafka-topics.sh
      - ./data/kafka/data:/var/lib/kafka/data
      - ./data/kafka/secrets:/etc/kafka/secrets
    command: 'bash -c ''if [ ! -f /tmp/kafka_run.sh ]; then echo "ERROR: Did you forget the kafka_run.sh file that came with this docker-compose.yml file?" && exit 1 ; else /tmp/kafka_run.sh && /etc/confluent/docker/run ; fi'''

  # kafka-create-topics:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: kafka-create-topics
  #   volumes:
  #     - ./create-kafka-topics.sh:/tmp/create-kafka-topics.sh
  #     - ./data/kafka:/var/lib/kafka/data
  #   command: "bash -c '/tmp/create-kafka-topics.sh'"
  #   depends_on:
  #     kafka:
  #       condition: service_healthy

  api:
    image: node:16
    command: /app/bin/www
    networks:
      backend:
    volumes:
      - ./node_modules:/app/node_modules
      - ./bin/www:/app/bin/www
      - ./src:/app/src
    environment:
      - IPFS_HOST=http://ipfs:5001
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_SSL_OFF=Y
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - KAFKA_BROKER=kafka:29092

  worker:
    image: node:16
    command: /app/bin/worker
    networks:
      backend:
    volumes:
      - ./node_modules:/app/node_modules
      - ./bin/worker:/app/bin/worker
    environment:
      - REDIS_HOST=redis

  worker-kafka:
    image: node:16
    command: /app/bin/kafka-worker
    networks:
      backend:
    volumes:
      - ./node_modules:/app/node_modules
      - ./bin/kafka-worker:/app/bin/kafka-worker
      - ./src:/app/src
    environment:
      - IPFS_HOST=http://ipfs:5001
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_SSL_OFF=Y
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - KAFKA_BROKER=kafka:29092

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1
