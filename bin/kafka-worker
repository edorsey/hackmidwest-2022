#!/usr/bin/env node
const path = require("path");
const { CID } = require("multiformats/cid");
const { handleEvent } = require("../src/bridge");
const ipfs = require("../src/ipfs");
const kafka = require("../src/kafka");
const { client: minio } = require("../src/minio");

const init = async (topic, groupId) => {
  console.log("Creating consumer...", { groupId });
  const consumer = await kafka.consumer({
    groupId,
  });

  console.log("Connecting consumer...");
  await consumer.connect();

  console.log("Subscribing consumer...", { topic });
  await consumer.subscribe({
    topic,
  });

  console.log("Running consumer...");
  await consumer.run({
    eachBatchAutoResolve: true,
    eachBatch: async ({
      batch,
      resolveOffset,
      heartbeat,
      commitOffsetsIfNecessary,
      uncommittedOffsets,
      isRunning,
      isStale,
      pause,
    }) => {
      const results = [];

      for (let message of batch.messages) {
        const [key, value] = [message.key.toString(), message.value.toString()];

        const data = JSON.parse(value);

        const result = await handleEvent(data);

        if (result) {
          results.push(result);
        }

        resolveOffset(message.offset);
        await heartbeat();
      }

      if (results.length === 0) {
        return;
      }

      const resultsByBucket = results.reduce((acc, result) => {
        const { bucket } = result;
        if (!acc[bucket]) {
          acc[bucket] = [];
        }

        acc[bucket].push(result);

        return acc;
      }, {});

      const allBuckets = Object.keys(resultsByBucket);

      const bucketTags = await Promise.all(
        allBuckets.map(async (bucket) => {
          try {
            const tags = await minio.getBucketTagging(bucket);

            return tags;
          } catch (err) {
            const newDirectory = await ipfs.add({
              path: `${bucket}/`,
            });

            const tagResult = await minio.setBucketTagging(bucket, {
              cid: newDirectory.cid.toString(),
            });

            const tags = await minio.getBucketTagging(bucket);

            return tags;
          }
        })
      );

      const bucketCIDs = bucketTags.map((tags, i) => {
        const tag = tags.find((t) => t.Key === "cid");
        const cid = tag.Value;

        const bucket = allBuckets[i];

        return { cid, bucket };
      });

      const bucketKeyPaths = bucketCIDs.map(({ cid, bucket }) => {
        const bucketResults = resultsByBucket[bucket];

        const keyPaths = bucketResults
          .map((result) => {
            return {
              key: result.key,
              cid: result.ipfsAddResult.cid,
              dag: result.ipfsAddResult,
            };
          })
          .map(({ key, cid, dag }) => {
            const { dir, base } = path.parse(key);

            return {
              dir: dir.split("/").filter(Boolean),
              base,
              cid,
              dag,
            };
          });

        return keyPaths;
      });

      const trees = bucketKeyPaths.map((keyPaths) => {
        return keyPaths.reduce(
          (tree, { dir = [], base, cid, dag }) => {
            if (dir.length > 0) {
              dir.reduce((dirTree, d, i) => {
                if (!dirTree[d]) {
                  dirTree[d] = { _files: [] };
                }

                if (i === dir.length - 1) {
                  dirTree[d]._files.push({ cid: cid.toString(), dag, base });
                }

                return dirTree[d];
              }, tree);
            } else {
              tree._files.push({ cid: cid.toString(), dag, base });
            }

            return tree;
          },
          { _files: [] }
        );
      });

      const parseTree = async (rootKey, subTree, cid) => {
        const keys = Object.keys(subTree).filter((key) => key !== "_files");

        if (keys.length > 0) {
          for (const key of keys) {
            const emptyDir = await ipfs.add({
              path: key,
            });

            const fullDirCID = await parseTree(key, subTree[key], emptyDir.cid);

            cid = await ipfs.object.patch.addLink(cid, {
              ...emptyDir,
              cid: fullDirCID,
              name: key,
            });
          }
        }

        if (subTree._files.length > 0) {
          for (const file of subTree._files) {
            cid = await ipfs.object.patch.addLink(cid, {
              ...file.dag,
              name: file.base,
            });
          }
        }

        return cid;
      };

      const cids = [];

      for (let i = 0; i < trees.length; i++) {
        const bucket = bucketCIDs[i];
        const tree = trees[i];
        const cid = await parseTree(bucket.bucket, tree, bucket.cid);
        const nameResult = await ipfs.name.publish(cid);
        console.log({ nameResult });
        cids.push(cid);
      }

      console.log(cids);
    },
  });
};

init("minio-events", "ipfs");
